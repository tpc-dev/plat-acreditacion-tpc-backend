// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlatAcreditacionTPCBackend;

#nullable disable

namespace PlatAcreditacionTPCBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220118033118_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.1.21452.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.CarpetaArranque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("CarpetasArranques");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Chofer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Choferes");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoContrato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<int>("EtapaCreacionContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InicioAcreditacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InicioContrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TerminoAcreditacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TerminoContrato")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("EtapaCreacionContratoId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TipoDocumentoAcreditacionId");

                    b.ToTable("ContratoTiposDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTrabajador", b =>
                {
                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ContratoId", "TrabajadorId");

                    b.HasIndex("CargoId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TrabajadorId");

                    b.HasIndex("TurnoId");

                    b.ToTable("ContratosTrabajadores");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoUsuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioId", "ContratoId");

                    b.HasIndex("ContratoId");

                    b.ToTable("ContratosUsuarios");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoVehiculo", b =>
                {
                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ContratoId", "VehiculoId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("ContratosVehiculos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.DocumentoClasificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentosClasificacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EmpresaContrato", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.HasKey("EmpresaId", "ContratoId");

                    b.HasIndex("ContratoId")
                        .IsUnique();

                    b.HasIndex("EstadoAcreditacionId");

                    b.ToTable("EmpresasContratos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EmpresaTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmpresaContratoContratoId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaContratoEmpresaId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TipoDocumentoAcreditacionId");

                    b.ToTable("EmpresaTiposDocumentosAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstadosAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstadosCivil");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EtapaCreacionContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EtapasCreacionContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Gerencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gerencias");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionContratoTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContratoTipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContratoTipoDocumentoAcreditacionId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.ToTable("HistoricosAcreditacionContratoTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionEmpresaTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmpresaTipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaTipoDocumentoAcreditacionId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.ToTable("HistoricosAcreditacionEmpresaTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionTrabajadorTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrabajadorTipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TrabajadorTipoDocumentoAcreditacionId");

                    b.ToTable("HistoricosAcreditacionTrabajadorTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionVehiculoTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehiculoTipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("VehiculoTipoDocumentoAcreditacionId");

                    b.ToTable("HistoricosAcreditacionVehiculoTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.IngresoVisitas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitaId");

                    b.ToTable("IngresosVisitas");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evidencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ItemsCarpetaArranque");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranqueCarpetaArranque", b =>
                {
                    b.Property<int>("ItemCarpetaArranqueId")
                        .HasColumnType("int");

                    b.Property<int>("CarpetaArranqueId")
                        .HasColumnType("int");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.HasKey("ItemCarpetaArranqueId", "CarpetaArranqueId");

                    b.HasIndex("CarpetaArranqueId");

                    b.ToTable("ItemsCarpetasArranqueCarpetasArranque");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Jornada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraTermino")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jornadas");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.NivelEducacional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NivelesEducacional");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.NombradaDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraTermino")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("NombradasDiaria");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.NombradaDiariaTrabajadorFrecuente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NombradaDiariaId")
                        .HasColumnType("int");

                    b.Property<int>("TrabajadorFrecuenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NombradaDiariaId");

                    b.HasIndex("TrabajadorFrecuenteId");

                    b.ToTable("NombradasDiariasTrabajadoresFrecuente");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ProtocoloIngreso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProtocolosIngresos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroAccesoTrabajadorContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoTrabajadorContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoTrabajadorTrabajadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrabajadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("TrabajadorId");

                    b.HasIndex("ContratoTrabajadorContratoId", "ContratoTrabajadorTrabajadorId");

                    b.ToTable("RegistroAccesosTrabajadoresContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroAccesoVehiculoContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoVehiculoContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoVehiculoVehiculoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("RegistroAccesosVehiculosContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroCovidAccesos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistroCovidFormularioId")
                        .HasColumnType("int");

                    b.Property<int>("Temperatura")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistroCovidFormularioId");

                    b.ToTable("RegistrosCovidAccesos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroCovidFormulario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HaTenidoContactoEstrecho")
                        .HasColumnType("bit");

                    b.Property<bool>("HaTenidoSintomas")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegistrosCovidFormularios");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroInduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaRealizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegistrosInduccion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentoClasificacionId")
                        .HasColumnType("int");

                    b.Property<int>("ItemCarpetaArranqueId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoClasificacionId");

                    b.HasIndex("ItemCarpetaArranqueId");

                    b.ToTable("TiposDocumentosAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TipoRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoRoles");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TipoVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoVehiculos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Trabajador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<int>("NivelEducacionalId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("GeneroId");

                    b.HasIndex("NivelEducacionalId");

                    b.HasIndex("PaisId");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorFrecuente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TrabajadoresFrecuente");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoTrabajadorContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoTrabajadorTrabajadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<int?>("TrabajadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TipoDocumentoAcreditacionId");

                    b.HasIndex("TrabajadorId");

                    b.HasIndex("ContratoTrabajadorContratoId", "ContratoTrabajadorTrabajadorId");

                    b.ToTable("TrabajadorTiposDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorTPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<int>("GerenciaId")
                        .HasColumnType("int");

                    b.Property<int>("NivelEducacionalId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("GeneroId");

                    b.HasIndex("GerenciaId");

                    b.HasIndex("NivelEducacionalId");

                    b.HasIndex("PaisId");

                    b.ToTable("TrabajadoresTPC");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiasFestivos")
                        .HasColumnType("int");

                    b.Property<int>("DiasLaborales")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasSemana")
                        .HasColumnType("int");

                    b.Property<int>("JornadaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("JornadaId");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Apellido2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoRolId")
                        .HasColumnType("int");

                    b.Property<int>("TrabajadorTPCId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("TipoRolId");

                    b.HasIndex("TrabajadorTPCId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("ChoferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChoferId");

                    b.HasIndex("TipoVehiculoId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.VehiculoTipoDocumentoAcreditacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoVehiculoContratoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoVehiculoVehiculoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoDocumentoAcreditacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("EstadoAcreditacionId");

                    b.HasIndex("TipoDocumentoAcreditacionId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("VehiculoTiposDocumentosAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Visita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVisita")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HaIngresado")
                        .HasColumnType("bit");

                    b.Property<string>("Hora")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Visitas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Cargo", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.CarpetaArranque", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Contrato", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EtapaCreacionContrato", "EtapaCreacionContrato")
                        .WithMany()
                        .HasForeignKey("EtapaCreacionContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("EtapaCreacionContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", "TipoDocumentoAcreditacion")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("TipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTrabajador", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Turno", "Turno")
                        .WithMany()
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Contrato");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("Trabajador");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoUsuario", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Usuario", "Usuario")
                        .WithMany("ContratosUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoVehiculo", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EmpresaContrato", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithOne("EmpresaContrato")
                        .HasForeignKey("PlatAcreditacionTPCBackend.Entidades.EmpresaContrato", "ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Empresa", "Empresa")
                        .WithMany("EmpresasContrato")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Empresa");

                    b.Navigation("EstadoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.EmpresaTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", "TipoDocumentoAcreditacion")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Empresa");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("TipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionContratoTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.ContratoTipoDocumentoAcreditacion", "ContratoTipoDocumentoAcreditacion")
                        .WithMany("ListHistoricosAcreditacionContratoTipoDocumentoAcreditacion")
                        .HasForeignKey("ContratoTipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContratoTipoDocumentoAcreditacion");

                    b.Navigation("EstadoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionEmpresaTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EmpresaTipoDocumentoAcreditacion", "EmpresaTipoDocumentoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EmpresaTipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaTipoDocumentoAcreditacion");

                    b.Navigation("EstadoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionTrabajadorTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TrabajadorTipoDocumentoAcreditacion", "TrabajadorTipoDocumentoAcreditacion")
                        .WithMany("ListHistoricosAcreditacionTrabajadorTipoDocumentoAcreditacion")
                        .HasForeignKey("TrabajadorTipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("TrabajadorTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.HistoricoAcreditacionVehiculoTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.VehiculoTipoDocumentoAcreditacion", "VehiculoTipoDocumentoAcreditacion")
                        .WithMany("ListHistoricosAcreditacionVehiculoTipoDocumentoAcreditacion")
                        .HasForeignKey("VehiculoTipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("VehiculoTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.IngresoVisitas", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Visita", "Visita")
                        .WithMany("IngresosVisitas")
                        .HasForeignKey("VisitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranqueCarpetaArranque", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.CarpetaArranque", "CarpetaArranque")
                        .WithMany("ItemsCarpetaArranqueCarpetaArranque")
                        .HasForeignKey("CarpetaArranqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranque", "ItemCarpetaArranque")
                        .WithMany("ItemsCarpetaArranqueCarpetaArranque")
                        .HasForeignKey("ItemCarpetaArranqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarpetaArranque");

                    b.Navigation("ItemCarpetaArranque");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.NombradaDiaria", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.NombradaDiariaTrabajadorFrecuente", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.NombradaDiaria", "NombradaDiaria")
                        .WithMany()
                        .HasForeignKey("NombradaDiariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TrabajadorFrecuente", "TrabajadorFrecuente")
                        .WithMany()
                        .HasForeignKey("TrabajadorFrecuenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NombradaDiaria");

                    b.Navigation("TrabajadorFrecuente");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroAccesoTrabajadorContrato", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.ContratoTrabajador", null)
                        .WithMany("RegistrosAccesosTrabajadorContrato")
                        .HasForeignKey("ContratoTrabajadorContratoId", "ContratoTrabajadorTrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Trabajador");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroAccesoVehiculoContrato", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId");

                    b.Navigation("Contrato");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.RegistroCovidAccesos", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.RegistroCovidFormulario", "RegistroCovidFormulario")
                        .WithMany()
                        .HasForeignKey("RegistroCovidFormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistroCovidFormulario");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.DocumentoClasificacion", "DocumentoClasificacion")
                        .WithMany()
                        .HasForeignKey("DocumentoClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranque", "ItemCarpetaArranque")
                        .WithMany("TiposDocumentosAcreditacion")
                        .HasForeignKey("ItemCarpetaArranqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentoClasificacion");

                    b.Navigation("ItemCarpetaArranque");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Trabajador", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.NivelEducacional", "NivelEducacional")
                        .WithMany()
                        .HasForeignKey("NivelEducacionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCivil");

                    b.Navigation("Genero");

                    b.Navigation("NivelEducacional");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorFrecuente", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", "TipoDocumentoAcreditacion")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.ContratoTrabajador", null)
                        .WithMany("ListTrabajadorTiposDocumentoAcreditacion")
                        .HasForeignKey("ContratoTrabajadorContratoId", "ContratoTrabajadorTrabajadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("TipoDocumentoAcreditacion");

                    b.Navigation("Trabajador");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorTPC", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Gerencia", "Gerencia")
                        .WithMany()
                        .HasForeignKey("GerenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.NivelEducacional", "NivelEducacional")
                        .WithMany()
                        .HasForeignKey("NivelEducacionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCivil");

                    b.Navigation("Genero");

                    b.Navigation("Gerencia");

                    b.Navigation("NivelEducacional");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Turno", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Jornada", "Jornada")
                        .WithMany()
                        .HasForeignKey("JornadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Jornada");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Usuario", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoRol", "TipoRol")
                        .WithMany()
                        .HasForeignKey("TipoRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TrabajadorTPC", "TrabajadorTPC")
                        .WithMany()
                        .HasForeignKey("TrabajadorTPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("TipoRol");

                    b.Navigation("TrabajadorTPC");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Vehiculo", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Chofer", "Chofer")
                        .WithMany()
                        .HasForeignKey("ChoferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoVehiculo", "TipoVehiculo")
                        .WithMany()
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chofer");

                    b.Navigation("TipoVehiculo");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.VehiculoTipoDocumentoAcreditacion", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.EstadoAcreditacion", "EstadoAcreditacion")
                        .WithMany()
                        .HasForeignKey("EstadoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.TipoDocumentoAcreditacion", "TipoDocumentoAcreditacion")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoAcreditacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId");

                    b.Navigation("Contrato");

                    b.Navigation("EstadoAcreditacion");

                    b.Navigation("TipoDocumentoAcreditacion");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Visita", b =>
                {
                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatAcreditacionTPCBackend.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.CarpetaArranque", b =>
                {
                    b.Navigation("ItemsCarpetaArranqueCarpetaArranque");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Contrato", b =>
                {
                    b.Navigation("EmpresaContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTipoDocumentoAcreditacion", b =>
                {
                    b.Navigation("ListHistoricosAcreditacionContratoTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ContratoTrabajador", b =>
                {
                    b.Navigation("ListTrabajadorTiposDocumentoAcreditacion");

                    b.Navigation("RegistrosAccesosTrabajadorContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Empresa", b =>
                {
                    b.Navigation("EmpresasContrato");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.ItemCarpetaArranque", b =>
                {
                    b.Navigation("ItemsCarpetaArranqueCarpetaArranque");

                    b.Navigation("TiposDocumentosAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.TrabajadorTipoDocumentoAcreditacion", b =>
                {
                    b.Navigation("ListHistoricosAcreditacionTrabajadorTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Usuario", b =>
                {
                    b.Navigation("ContratosUsuarios");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.VehiculoTipoDocumentoAcreditacion", b =>
                {
                    b.Navigation("ListHistoricosAcreditacionVehiculoTipoDocumentoAcreditacion");
                });

            modelBuilder.Entity("PlatAcreditacionTPCBackend.Entidades.Visita", b =>
                {
                    b.Navigation("IngresosVisitas");
                });
#pragma warning restore 612, 618
        }
    }
}
